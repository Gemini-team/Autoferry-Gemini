// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: query/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Query {
  public static partial class QueryService
  {
    static readonly string __ServiceName = "query.QueryService";

    static readonly grpc::Marshaller<global::Query.AllVesselIdsRequest> __Marshaller_query_AllVesselIdsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Query.AllVesselIdsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Query.AllVesselIdsResponse> __Marshaller_query_AllVesselIdsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Query.AllVesselIdsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Query.IMURequest> __Marshaller_query_IMURequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Query.IMURequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Query.IMUResponse> __Marshaller_query_IMUResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Query.IMUResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Query.VesselBoundsRequest> __Marshaller_query_VesselBoundsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Query.VesselBoundsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Query.VesselBoundsResponse> __Marshaller_query_VesselBoundsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Query.VesselBoundsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Query.AllVesselIdsRequest, global::Query.AllVesselIdsResponse> __Method_GetAllVesselIds = new grpc::Method<global::Query.AllVesselIdsRequest, global::Query.AllVesselIdsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllVesselIds",
        __Marshaller_query_AllVesselIdsRequest,
        __Marshaller_query_AllVesselIdsResponse);

    static readonly grpc::Method<global::Query.IMURequest, global::Query.IMUResponse> __Method_GetVesselIMU = new grpc::Method<global::Query.IMURequest, global::Query.IMUResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVesselIMU",
        __Marshaller_query_IMURequest,
        __Marshaller_query_IMUResponse);

    static readonly grpc::Method<global::Query.VesselBoundsRequest, global::Query.VesselBoundsResponse> __Method_GetVesselBounds = new grpc::Method<global::Query.VesselBoundsRequest, global::Query.VesselBoundsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVesselBounds",
        __Marshaller_query_VesselBoundsRequest,
        __Marshaller_query_VesselBoundsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Query.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of QueryService</summary>
    [grpc::BindServiceMethod(typeof(QueryService), "BindService")]
    public abstract partial class QueryServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Query.AllVesselIdsResponse> GetAllVesselIds(global::Query.AllVesselIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Query.IMUResponse> GetVesselIMU(global::Query.IMURequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Query.VesselBoundsResponse> GetVesselBounds(global::Query.VesselBoundsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for QueryService</summary>
    public partial class QueryServiceClient : grpc::ClientBase<QueryServiceClient>
    {
      /// <summary>Creates a new client for QueryService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public QueryServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for QueryService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public QueryServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected QueryServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected QueryServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Query.AllVesselIdsResponse GetAllVesselIds(global::Query.AllVesselIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllVesselIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Query.AllVesselIdsResponse GetAllVesselIds(global::Query.AllVesselIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllVesselIds, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Query.AllVesselIdsResponse> GetAllVesselIdsAsync(global::Query.AllVesselIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllVesselIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Query.AllVesselIdsResponse> GetAllVesselIdsAsync(global::Query.AllVesselIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllVesselIds, null, options, request);
      }
      public virtual global::Query.IMUResponse GetVesselIMU(global::Query.IMURequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVesselIMU(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Query.IMUResponse GetVesselIMU(global::Query.IMURequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVesselIMU, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Query.IMUResponse> GetVesselIMUAsync(global::Query.IMURequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVesselIMUAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Query.IMUResponse> GetVesselIMUAsync(global::Query.IMURequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVesselIMU, null, options, request);
      }
      public virtual global::Query.VesselBoundsResponse GetVesselBounds(global::Query.VesselBoundsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVesselBounds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Query.VesselBoundsResponse GetVesselBounds(global::Query.VesselBoundsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVesselBounds, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Query.VesselBoundsResponse> GetVesselBoundsAsync(global::Query.VesselBoundsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVesselBoundsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Query.VesselBoundsResponse> GetVesselBoundsAsync(global::Query.VesselBoundsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVesselBounds, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override QueryServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(QueryServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllVesselIds, serviceImpl.GetAllVesselIds)
          .AddMethod(__Method_GetVesselIMU, serviceImpl.GetVesselIMU)
          .AddMethod(__Method_GetVesselBounds, serviceImpl.GetVesselBounds).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAllVesselIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Query.AllVesselIdsRequest, global::Query.AllVesselIdsResponse>(serviceImpl.GetAllVesselIds));
      serviceBinder.AddMethod(__Method_GetVesselIMU, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Query.IMURequest, global::Query.IMUResponse>(serviceImpl.GetVesselIMU));
      serviceBinder.AddMethod(__Method_GetVesselBounds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Query.VesselBoundsRequest, global::Query.VesselBoundsResponse>(serviceImpl.GetVesselBounds));
    }

  }
}
#endregion
