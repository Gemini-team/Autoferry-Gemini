// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensormanager/sensormanager.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Sensormanager {
  /// <summary>
  /// The data service definition
  /// </summary>
  public static partial class SensorManager
  {
    static readonly string __ServiceName = "sensormanager.SensorManager";

    static readonly grpc::Marshaller<global::Sensormanager.AllSensorsOfTypeRequest> __Marshaller_sensormanager_AllSensorsOfTypeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensormanager.AllSensorsOfTypeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensormanager.AllSensorsOfTypeResponse> __Marshaller_sensormanager_AllSensorsOfTypeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensormanager.AllSensorsOfTypeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensormanager.AllSensorsOnVesselRequest> __Marshaller_sensormanager_AllSensorsOnVesselRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensormanager.AllSensorsOnVesselRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sensormanager.AllSensorsOnVesselResponse> __Marshaller_sensormanager_AllSensorsOnVesselResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sensormanager.AllSensorsOnVesselResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Sensormanager.AllSensorsOfTypeRequest, global::Sensormanager.AllSensorsOfTypeResponse> __Method_GetAllSensorsOfType = new grpc::Method<global::Sensormanager.AllSensorsOfTypeRequest, global::Sensormanager.AllSensorsOfTypeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllSensorsOfType",
        __Marshaller_sensormanager_AllSensorsOfTypeRequest,
        __Marshaller_sensormanager_AllSensorsOfTypeResponse);

    static readonly grpc::Method<global::Sensormanager.AllSensorsOnVesselRequest, global::Sensormanager.AllSensorsOnVesselResponse> __Method_GetAllSensorsOnVessel = new grpc::Method<global::Sensormanager.AllSensorsOnVesselRequest, global::Sensormanager.AllSensorsOnVesselResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllSensorsOnVessel",
        __Marshaller_sensormanager_AllSensorsOnVesselRequest,
        __Marshaller_sensormanager_AllSensorsOnVesselResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sensormanager.SensormanagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SensorManager</summary>
    [grpc::BindServiceMethod(typeof(SensorManager), "BindService")]
    public abstract partial class SensorManagerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Sensormanager.AllSensorsOfTypeResponse> GetAllSensorsOfType(global::Sensormanager.AllSensorsOfTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sensormanager.AllSensorsOnVesselResponse> GetAllSensorsOnVessel(global::Sensormanager.AllSensorsOnVesselRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SensorManager</summary>
    public partial class SensorManagerClient : grpc::ClientBase<SensorManagerClient>
    {
      /// <summary>Creates a new client for SensorManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SensorManagerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SensorManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SensorManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SensorManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SensorManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Sensormanager.AllSensorsOfTypeResponse GetAllSensorsOfType(global::Sensormanager.AllSensorsOfTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllSensorsOfType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sensormanager.AllSensorsOfTypeResponse GetAllSensorsOfType(global::Sensormanager.AllSensorsOfTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllSensorsOfType, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Sensormanager.AllSensorsOfTypeResponse> GetAllSensorsOfTypeAsync(global::Sensormanager.AllSensorsOfTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllSensorsOfTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Sensormanager.AllSensorsOfTypeResponse> GetAllSensorsOfTypeAsync(global::Sensormanager.AllSensorsOfTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllSensorsOfType, null, options, request);
      }
      public virtual global::Sensormanager.AllSensorsOnVesselResponse GetAllSensorsOnVessel(global::Sensormanager.AllSensorsOnVesselRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllSensorsOnVessel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sensormanager.AllSensorsOnVesselResponse GetAllSensorsOnVessel(global::Sensormanager.AllSensorsOnVesselRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllSensorsOnVessel, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Sensormanager.AllSensorsOnVesselResponse> GetAllSensorsOnVesselAsync(global::Sensormanager.AllSensorsOnVesselRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllSensorsOnVesselAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Sensormanager.AllSensorsOnVesselResponse> GetAllSensorsOnVesselAsync(global::Sensormanager.AllSensorsOnVesselRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllSensorsOnVessel, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SensorManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SensorManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SensorManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllSensorsOfType, serviceImpl.GetAllSensorsOfType)
          .AddMethod(__Method_GetAllSensorsOnVessel, serviceImpl.GetAllSensorsOnVessel).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SensorManagerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAllSensorsOfType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Sensormanager.AllSensorsOfTypeRequest, global::Sensormanager.AllSensorsOfTypeResponse>(serviceImpl.GetAllSensorsOfType));
      serviceBinder.AddMethod(__Method_GetAllSensorsOnVessel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Sensormanager.AllSensorsOnVesselRequest, global::Sensormanager.AllSensorsOnVesselResponse>(serviceImpl.GetAllSensorsOnVessel));
    }

  }
}
#endregion
