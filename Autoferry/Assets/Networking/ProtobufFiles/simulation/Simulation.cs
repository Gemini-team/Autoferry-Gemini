// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: simulation/simulation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Simulation {

  /// <summary>Holder for reflection information generated from simulation/simulation.proto</summary>
  public static partial class SimulationReflection {

    #region Descriptor
    /// <summary>File descriptor for simulation/simulation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimulationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtzaW11bGF0aW9uL3NpbXVsYXRpb24ucHJvdG8SCnNpbXVsYXRpb24iSQoF",
            "Rm9yY2USCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAISCQoBaxgE",
            "IAEoAhIJCgFtGAUgASgCEgkKAW4YBiABKAIiXwoIUG9zaXRpb24SDQoFbm9y",
            "dGgYASABKAISDAoEZWFzdBgCIAEoAhIMCgRkb3duGAMgASgCEgwKBHJvbGwY",
            "BCABKAISDQoFcGl0Y2gYBSABKAISCwoDeWF3GAYgASgCImAKCFZlbG9jaXR5",
            "Eg0KBXN1cmdlGAEgASgCEgwKBHN3YXkYAiABKAISDQoFaGVhdmUYAyABKAIS",
            "DAoEcm9sbBgEIAEoAhINCgVwaXRjaBgFIAEoAhILCgN5YXcYBiABKAIiUwoL",
            "U3RlcFJlcXVlc3QSEAoIdmVzc2VsSWQYASABKAkSIAoFZm9yY2UYAiABKAsy",
            "ES5zaW11bGF0aW9uLkZvcmNlEhAKCHN0ZXBTaXplGAMgASgCIlQKDFN0ZXBS",
            "ZXNwb25zZRIhCgNwb3MYASABKAsyFC5zaW11bGF0aW9uLlBvc2l0aW9uEiEK",
            "A3ZlbBgCIAEoCzIULnNpbXVsYXRpb24uVmVsb2NpdHkicgoMUmVzZXRSZXF1",
            "ZXN0EhAKCHZlc3NlbElkGAEgASgJEicKCXJlc2V0X3BvcxgCIAEoCzIULnNp",
            "bXVsYXRpb24uUG9zaXRpb24SJwoJcmVzZXRfdmVsGAMgASgLMhQuc2ltdWxh",
            "dGlvbi5WZWxvY2l0eSIgCg1SZXNldFJlc3BvbnNlEg8KB3N1Y2Nlc3MYASAB",
            "KAgyiwEKClNpbXVsYXRpb24SPQoGRG9TdGVwEhcuc2ltdWxhdGlvbi5TdGVw",
            "UmVxdWVzdBoYLnNpbXVsYXRpb24uU3RlcFJlc3BvbnNlIgASPgoFUmVzZXQS",
            "GC5zaW11bGF0aW9uLlJlc2V0UmVxdWVzdBoZLnNpbXVsYXRpb24uUmVzZXRS",
            "ZXNwb25zZSIAQjIKHGF1dG9mZXJyeS5jbGllbnRzLnNpbXVsYXRpb25CCnNp",
            "bXVsYXRpb25QAaICA0hMV2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Simulation.Force), global::Simulation.Force.Parser, new[]{ "X", "Y", "Z", "K", "M", "N" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Simulation.Position), global::Simulation.Position.Parser, new[]{ "North", "East", "Down", "Roll", "Pitch", "Yaw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Simulation.Velocity), global::Simulation.Velocity.Parser, new[]{ "Surge", "Sway", "Heave", "Roll", "Pitch", "Yaw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Simulation.StepRequest), global::Simulation.StepRequest.Parser, new[]{ "VesselId", "Force", "StepSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Simulation.StepResponse), global::Simulation.StepResponse.Parser, new[]{ "Pos", "Vel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Simulation.ResetRequest), global::Simulation.ResetRequest.Parser, new[]{ "VesselId", "ResetPos", "ResetVel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Simulation.ResetResponse), global::Simulation.ResetResponse.Parser, new[]{ "Success" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Includes all forces on ferry except rigid body inertial forces, added mass forces in the rotational DOFs, and collision forces.
  /// </summary>
  public sealed partial class Force : pb::IMessage<Force> {
    private static readonly pb::MessageParser<Force> _parser = new pb::MessageParser<Force>(() => new Force());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Force> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Simulation.SimulationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Force() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Force(Force other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      k_ = other.k_;
      m_ = other.m_;
      n_ = other.n_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Force Clone() {
      return new Force(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 4;
    private float k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 5;
    private float m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 6;
    private float n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float N {
      get { return n_; }
      set {
        n_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Force);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Force other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K, other.K)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(M, other.M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(N, other.N)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (K != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K);
      if (M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(M);
      if (N != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(N);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (K != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(K);
      }
      if (M != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(M);
      }
      if (N != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(N);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (K != 0F) {
        size += 1 + 4;
      }
      if (M != 0F) {
        size += 1 + 4;
      }
      if (N != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Force other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.K != 0F) {
        K = other.K;
      }
      if (other.M != 0F) {
        M = other.M;
      }
      if (other.N != 0F) {
        N = other.N;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            K = input.ReadFloat();
            break;
          }
          case 45: {
            M = input.ReadFloat();
            break;
          }
          case 53: {
            N = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Simulation.SimulationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      north_ = other.north_;
      east_ = other.east_;
      down_ = other.down_;
      roll_ = other.roll_;
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "north" field.</summary>
    public const int NorthFieldNumber = 1;
    private float north_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float North {
      get { return north_; }
      set {
        north_ = value;
      }
    }

    /// <summary>Field number for the "east" field.</summary>
    public const int EastFieldNumber = 2;
    private float east_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float East {
      get { return east_; }
      set {
        east_ = value;
      }
    }

    /// <summary>Field number for the "down" field.</summary>
    public const int DownFieldNumber = 3;
    private float down_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Down {
      get { return down_; }
      set {
        down_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 4;
    private float roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 5;
    private float pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 6;
    private float yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(North, other.North)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(East, other.East)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Down, other.Down)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Roll, other.Roll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (North != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(North);
      if (East != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(East);
      if (Down != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Down);
      if (Roll != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Roll);
      if (Pitch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pitch);
      if (Yaw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaw);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (North != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(North);
      }
      if (East != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(East);
      }
      if (Down != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Down);
      }
      if (Roll != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Roll);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Pitch);
      }
      if (Yaw != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Yaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (North != 0F) {
        size += 1 + 4;
      }
      if (East != 0F) {
        size += 1 + 4;
      }
      if (Down != 0F) {
        size += 1 + 4;
      }
      if (Roll != 0F) {
        size += 1 + 4;
      }
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (Yaw != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.North != 0F) {
        North = other.North;
      }
      if (other.East != 0F) {
        East = other.East;
      }
      if (other.Down != 0F) {
        Down = other.Down;
      }
      if (other.Roll != 0F) {
        Roll = other.Roll;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.Yaw != 0F) {
        Yaw = other.Yaw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            North = input.ReadFloat();
            break;
          }
          case 21: {
            East = input.ReadFloat();
            break;
          }
          case 29: {
            Down = input.ReadFloat();
            break;
          }
          case 37: {
            Roll = input.ReadFloat();
            break;
          }
          case 45: {
            Pitch = input.ReadFloat();
            break;
          }
          case 53: {
            Yaw = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Velocity : pb::IMessage<Velocity> {
    private static readonly pb::MessageParser<Velocity> _parser = new pb::MessageParser<Velocity>(() => new Velocity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Velocity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Simulation.SimulationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Velocity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Velocity(Velocity other) : this() {
      surge_ = other.surge_;
      sway_ = other.sway_;
      heave_ = other.heave_;
      roll_ = other.roll_;
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Velocity Clone() {
      return new Velocity(this);
    }

    /// <summary>Field number for the "surge" field.</summary>
    public const int SurgeFieldNumber = 1;
    private float surge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Surge {
      get { return surge_; }
      set {
        surge_ = value;
      }
    }

    /// <summary>Field number for the "sway" field.</summary>
    public const int SwayFieldNumber = 2;
    private float sway_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sway {
      get { return sway_; }
      set {
        sway_ = value;
      }
    }

    /// <summary>Field number for the "heave" field.</summary>
    public const int HeaveFieldNumber = 3;
    private float heave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Heave {
      get { return heave_; }
      set {
        heave_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 4;
    private float roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 5;
    private float pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 6;
    private float yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Velocity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Velocity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Surge, other.Surge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sway, other.Sway)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Heave, other.Heave)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Roll, other.Roll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Surge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Surge);
      if (Sway != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sway);
      if (Heave != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Heave);
      if (Roll != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Roll);
      if (Pitch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pitch);
      if (Yaw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaw);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Surge != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Surge);
      }
      if (Sway != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Sway);
      }
      if (Heave != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Heave);
      }
      if (Roll != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Roll);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Pitch);
      }
      if (Yaw != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Yaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Surge != 0F) {
        size += 1 + 4;
      }
      if (Sway != 0F) {
        size += 1 + 4;
      }
      if (Heave != 0F) {
        size += 1 + 4;
      }
      if (Roll != 0F) {
        size += 1 + 4;
      }
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (Yaw != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Velocity other) {
      if (other == null) {
        return;
      }
      if (other.Surge != 0F) {
        Surge = other.Surge;
      }
      if (other.Sway != 0F) {
        Sway = other.Sway;
      }
      if (other.Heave != 0F) {
        Heave = other.Heave;
      }
      if (other.Roll != 0F) {
        Roll = other.Roll;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.Yaw != 0F) {
        Yaw = other.Yaw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Surge = input.ReadFloat();
            break;
          }
          case 21: {
            Sway = input.ReadFloat();
            break;
          }
          case 29: {
            Heave = input.ReadFloat();
            break;
          }
          case 37: {
            Roll = input.ReadFloat();
            break;
          }
          case 45: {
            Pitch = input.ReadFloat();
            break;
          }
          case 53: {
            Yaw = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StepRequest : pb::IMessage<StepRequest> {
    private static readonly pb::MessageParser<StepRequest> _parser = new pb::MessageParser<StepRequest>(() => new StepRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StepRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Simulation.SimulationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepRequest(StepRequest other) : this() {
      vesselId_ = other.vesselId_;
      force_ = other.force_ != null ? other.force_.Clone() : null;
      stepSize_ = other.stepSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepRequest Clone() {
      return new StepRequest(this);
    }

    /// <summary>Field number for the "vesselId" field.</summary>
    public const int VesselIdFieldNumber = 1;
    private string vesselId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VesselId {
      get { return vesselId_; }
      set {
        vesselId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 2;
    private global::Simulation.Force force_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Simulation.Force Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "stepSize" field.</summary>
    public const int StepSizeFieldNumber = 3;
    private float stepSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StepSize {
      get { return stepSize_; }
      set {
        stepSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StepRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StepRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VesselId != other.VesselId) return false;
      if (!object.Equals(Force, other.Force)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StepSize, other.StepSize)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VesselId.Length != 0) hash ^= VesselId.GetHashCode();
      if (force_ != null) hash ^= Force.GetHashCode();
      if (StepSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StepSize);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VesselId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VesselId);
      }
      if (force_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Force);
      }
      if (StepSize != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(StepSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VesselId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VesselId);
      }
      if (force_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Force);
      }
      if (StepSize != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StepRequest other) {
      if (other == null) {
        return;
      }
      if (other.VesselId.Length != 0) {
        VesselId = other.VesselId;
      }
      if (other.force_ != null) {
        if (force_ == null) {
          Force = new global::Simulation.Force();
        }
        Force.MergeFrom(other.Force);
      }
      if (other.StepSize != 0F) {
        StepSize = other.StepSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VesselId = input.ReadString();
            break;
          }
          case 18: {
            if (force_ == null) {
              Force = new global::Simulation.Force();
            }
            input.ReadMessage(Force);
            break;
          }
          case 29: {
            StepSize = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StepResponse : pb::IMessage<StepResponse> {
    private static readonly pb::MessageParser<StepResponse> _parser = new pb::MessageParser<StepResponse>(() => new StepResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StepResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Simulation.SimulationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepResponse(StepResponse other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      vel_ = other.vel_ != null ? other.vel_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepResponse Clone() {
      return new StepResponse(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Simulation.Position pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Simulation.Position Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "vel" field.</summary>
    public const int VelFieldNumber = 2;
    private global::Simulation.Velocity vel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Simulation.Velocity Vel {
      get { return vel_; }
      set {
        vel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StepResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StepResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Vel, other.Vel)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (vel_ != null) hash ^= Vel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (vel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Vel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (vel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StepResponse other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::Simulation.Position();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.vel_ != null) {
        if (vel_ == null) {
          Vel = new global::Simulation.Velocity();
        }
        Vel.MergeFrom(other.Vel);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              Pos = new global::Simulation.Position();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 18: {
            if (vel_ == null) {
              Vel = new global::Simulation.Velocity();
            }
            input.ReadMessage(Vel);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetRequest : pb::IMessage<ResetRequest> {
    private static readonly pb::MessageParser<ResetRequest> _parser = new pb::MessageParser<ResetRequest>(() => new ResetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Simulation.SimulationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetRequest(ResetRequest other) : this() {
      vesselId_ = other.vesselId_;
      resetPos_ = other.resetPos_ != null ? other.resetPos_.Clone() : null;
      resetVel_ = other.resetVel_ != null ? other.resetVel_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetRequest Clone() {
      return new ResetRequest(this);
    }

    /// <summary>Field number for the "vesselId" field.</summary>
    public const int VesselIdFieldNumber = 1;
    private string vesselId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VesselId {
      get { return vesselId_; }
      set {
        vesselId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reset_pos" field.</summary>
    public const int ResetPosFieldNumber = 2;
    private global::Simulation.Position resetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Simulation.Position ResetPos {
      get { return resetPos_; }
      set {
        resetPos_ = value;
      }
    }

    /// <summary>Field number for the "reset_vel" field.</summary>
    public const int ResetVelFieldNumber = 3;
    private global::Simulation.Velocity resetVel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Simulation.Velocity ResetVel {
      get { return resetVel_; }
      set {
        resetVel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VesselId != other.VesselId) return false;
      if (!object.Equals(ResetPos, other.ResetPos)) return false;
      if (!object.Equals(ResetVel, other.ResetVel)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VesselId.Length != 0) hash ^= VesselId.GetHashCode();
      if (resetPos_ != null) hash ^= ResetPos.GetHashCode();
      if (resetVel_ != null) hash ^= ResetVel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VesselId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VesselId);
      }
      if (resetPos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResetPos);
      }
      if (resetVel_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ResetVel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VesselId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VesselId);
      }
      if (resetPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResetPos);
      }
      if (resetVel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResetVel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetRequest other) {
      if (other == null) {
        return;
      }
      if (other.VesselId.Length != 0) {
        VesselId = other.VesselId;
      }
      if (other.resetPos_ != null) {
        if (resetPos_ == null) {
          ResetPos = new global::Simulation.Position();
        }
        ResetPos.MergeFrom(other.ResetPos);
      }
      if (other.resetVel_ != null) {
        if (resetVel_ == null) {
          ResetVel = new global::Simulation.Velocity();
        }
        ResetVel.MergeFrom(other.ResetVel);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VesselId = input.ReadString();
            break;
          }
          case 18: {
            if (resetPos_ == null) {
              ResetPos = new global::Simulation.Position();
            }
            input.ReadMessage(ResetPos);
            break;
          }
          case 26: {
            if (resetVel_ == null) {
              ResetVel = new global::Simulation.Velocity();
            }
            input.ReadMessage(ResetVel);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetResponse : pb::IMessage<ResetResponse> {
    private static readonly pb::MessageParser<ResetResponse> _parser = new pb::MessageParser<ResetResponse>(() => new ResetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Simulation.SimulationReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetResponse(ResetResponse other) : this() {
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetResponse Clone() {
      return new ResetResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
