// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vehiclecontroller/vehiclecontroller.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Vehiclecontroller {
  public static partial class VehicleController
  {
    static readonly string __ServiceName = "vehiclecontroller.VehicleController";

    static readonly grpc::Marshaller<global::Vehiclecontroller.DriveRequest> __Marshaller_vehiclecontroller_DriveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vehiclecontroller.DriveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Vehiclecontroller.DriveResponse> __Marshaller_vehiclecontroller_DriveResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vehiclecontroller.DriveResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Vehiclecontroller.SteerRequest> __Marshaller_vehiclecontroller_SteerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vehiclecontroller.SteerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Vehiclecontroller.SteerResponse> __Marshaller_vehiclecontroller_SteerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vehiclecontroller.SteerResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Vehiclecontroller.DriveRequest, global::Vehiclecontroller.DriveResponse> __Method_DriveForward = new grpc::Method<global::Vehiclecontroller.DriveRequest, global::Vehiclecontroller.DriveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DriveForward",
        __Marshaller_vehiclecontroller_DriveRequest,
        __Marshaller_vehiclecontroller_DriveResponse);

    static readonly grpc::Method<global::Vehiclecontroller.DriveRequest, global::Vehiclecontroller.DriveResponse> __Method_DriveBackward = new grpc::Method<global::Vehiclecontroller.DriveRequest, global::Vehiclecontroller.DriveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DriveBackward",
        __Marshaller_vehiclecontroller_DriveRequest,
        __Marshaller_vehiclecontroller_DriveResponse);

    static readonly grpc::Method<global::Vehiclecontroller.SteerRequest, global::Vehiclecontroller.SteerResponse> __Method_SteerRight = new grpc::Method<global::Vehiclecontroller.SteerRequest, global::Vehiclecontroller.SteerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SteerRight",
        __Marshaller_vehiclecontroller_SteerRequest,
        __Marshaller_vehiclecontroller_SteerResponse);

    static readonly grpc::Method<global::Vehiclecontroller.SteerRequest, global::Vehiclecontroller.SteerResponse> __Method_SteerLeft = new grpc::Method<global::Vehiclecontroller.SteerRequest, global::Vehiclecontroller.SteerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SteerLeft",
        __Marshaller_vehiclecontroller_SteerRequest,
        __Marshaller_vehiclecontroller_SteerResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Vehiclecontroller.VehiclecontrollerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VehicleController</summary>
    [grpc::BindServiceMethod(typeof(VehicleController), "BindService")]
    public abstract partial class VehicleControllerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Vehiclecontroller.DriveResponse> DriveForward(global::Vehiclecontroller.DriveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Vehiclecontroller.DriveResponse> DriveBackward(global::Vehiclecontroller.DriveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Vehiclecontroller.SteerResponse> SteerRight(global::Vehiclecontroller.SteerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Vehiclecontroller.SteerResponse> SteerLeft(global::Vehiclecontroller.SteerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VehicleController</summary>
    public partial class VehicleControllerClient : grpc::ClientBase<VehicleControllerClient>
    {
      /// <summary>Creates a new client for VehicleController</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VehicleControllerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VehicleController that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VehicleControllerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VehicleControllerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VehicleControllerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Vehiclecontroller.DriveResponse DriveForward(global::Vehiclecontroller.DriveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DriveForward(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vehiclecontroller.DriveResponse DriveForward(global::Vehiclecontroller.DriveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DriveForward, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vehiclecontroller.DriveResponse> DriveForwardAsync(global::Vehiclecontroller.DriveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DriveForwardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vehiclecontroller.DriveResponse> DriveForwardAsync(global::Vehiclecontroller.DriveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DriveForward, null, options, request);
      }
      public virtual global::Vehiclecontroller.DriveResponse DriveBackward(global::Vehiclecontroller.DriveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DriveBackward(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vehiclecontroller.DriveResponse DriveBackward(global::Vehiclecontroller.DriveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DriveBackward, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vehiclecontroller.DriveResponse> DriveBackwardAsync(global::Vehiclecontroller.DriveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DriveBackwardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vehiclecontroller.DriveResponse> DriveBackwardAsync(global::Vehiclecontroller.DriveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DriveBackward, null, options, request);
      }
      public virtual global::Vehiclecontroller.SteerResponse SteerRight(global::Vehiclecontroller.SteerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SteerRight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vehiclecontroller.SteerResponse SteerRight(global::Vehiclecontroller.SteerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SteerRight, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vehiclecontroller.SteerResponse> SteerRightAsync(global::Vehiclecontroller.SteerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SteerRightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vehiclecontroller.SteerResponse> SteerRightAsync(global::Vehiclecontroller.SteerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SteerRight, null, options, request);
      }
      public virtual global::Vehiclecontroller.SteerResponse SteerLeft(global::Vehiclecontroller.SteerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SteerLeft(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vehiclecontroller.SteerResponse SteerLeft(global::Vehiclecontroller.SteerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SteerLeft, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vehiclecontroller.SteerResponse> SteerLeftAsync(global::Vehiclecontroller.SteerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SteerLeftAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vehiclecontroller.SteerResponse> SteerLeftAsync(global::Vehiclecontroller.SteerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SteerLeft, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VehicleControllerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VehicleControllerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VehicleControllerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DriveForward, serviceImpl.DriveForward)
          .AddMethod(__Method_DriveBackward, serviceImpl.DriveBackward)
          .AddMethod(__Method_SteerRight, serviceImpl.SteerRight)
          .AddMethod(__Method_SteerLeft, serviceImpl.SteerLeft).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VehicleControllerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DriveForward, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vehiclecontroller.DriveRequest, global::Vehiclecontroller.DriveResponse>(serviceImpl.DriveForward));
      serviceBinder.AddMethod(__Method_DriveBackward, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vehiclecontroller.DriveRequest, global::Vehiclecontroller.DriveResponse>(serviceImpl.DriveBackward));
      serviceBinder.AddMethod(__Method_SteerRight, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vehiclecontroller.SteerRequest, global::Vehiclecontroller.SteerResponse>(serviceImpl.SteerRight));
      serviceBinder.AddMethod(__Method_SteerLeft, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vehiclecontroller.SteerRequest, global::Vehiclecontroller.SteerResponse>(serviceImpl.SteerLeft));
    }

  }
}
#endregion
