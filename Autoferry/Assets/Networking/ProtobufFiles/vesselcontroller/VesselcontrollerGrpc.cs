// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vesselcontroller/vesselcontroller.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Vesselcontroller {
  public static partial class VesselController
  {
    static readonly string __ServiceName = "vesselcontroller.VesselController";

    static readonly grpc::Marshaller<global::Vesselcontroller.ControlRequest> __Marshaller_vesselcontroller_ControlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vesselcontroller.ControlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Vesselcontroller.ControlResponse> __Marshaller_vesselcontroller_ControlResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vesselcontroller.ControlResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse> __Method_Forward = new grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Forward",
        __Marshaller_vesselcontroller_ControlRequest,
        __Marshaller_vesselcontroller_ControlResponse);

    static readonly grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse> __Method_Backward = new grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Backward",
        __Marshaller_vesselcontroller_ControlRequest,
        __Marshaller_vesselcontroller_ControlResponse);

    static readonly grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse> __Method_Portside = new grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Portside",
        __Marshaller_vesselcontroller_ControlRequest,
        __Marshaller_vesselcontroller_ControlResponse);

    static readonly grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse> __Method_Starboard = new grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Starboard",
        __Marshaller_vesselcontroller_ControlRequest,
        __Marshaller_vesselcontroller_ControlResponse);

    static readonly grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse> __Method_Idle = new grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Idle",
        __Marshaller_vesselcontroller_ControlRequest,
        __Marshaller_vesselcontroller_ControlResponse);

    static readonly grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse> __Method_RotateClockwise = new grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RotateClockwise",
        __Marshaller_vesselcontroller_ControlRequest,
        __Marshaller_vesselcontroller_ControlResponse);

    static readonly grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse> __Method_RotateCounterClockwise = new grpc::Method<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RotateCounterClockwise",
        __Marshaller_vesselcontroller_ControlRequest,
        __Marshaller_vesselcontroller_ControlResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Vesselcontroller.VesselcontrollerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VesselController</summary>
    [grpc::BindServiceMethod(typeof(VesselController), "BindService")]
    public abstract partial class VesselControllerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Vesselcontroller.ControlResponse> Forward(global::Vesselcontroller.ControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Vesselcontroller.ControlResponse> Backward(global::Vesselcontroller.ControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Vesselcontroller.ControlResponse> Portside(global::Vesselcontroller.ControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Vesselcontroller.ControlResponse> Starboard(global::Vesselcontroller.ControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Vesselcontroller.ControlResponse> Idle(global::Vesselcontroller.ControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Vesselcontroller.ControlResponse> RotateClockwise(global::Vesselcontroller.ControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Vesselcontroller.ControlResponse> RotateCounterClockwise(global::Vesselcontroller.ControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VesselController</summary>
    public partial class VesselControllerClient : grpc::ClientBase<VesselControllerClient>
    {
      /// <summary>Creates a new client for VesselController</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VesselControllerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VesselController that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VesselControllerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VesselControllerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VesselControllerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Vesselcontroller.ControlResponse Forward(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Forward(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vesselcontroller.ControlResponse Forward(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Forward, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> ForwardAsync(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ForwardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> ForwardAsync(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Forward, null, options, request);
      }
      public virtual global::Vesselcontroller.ControlResponse Backward(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Backward(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vesselcontroller.ControlResponse Backward(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Backward, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> BackwardAsync(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BackwardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> BackwardAsync(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Backward, null, options, request);
      }
      public virtual global::Vesselcontroller.ControlResponse Portside(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Portside(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vesselcontroller.ControlResponse Portside(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Portside, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> PortsideAsync(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PortsideAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> PortsideAsync(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Portside, null, options, request);
      }
      public virtual global::Vesselcontroller.ControlResponse Starboard(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Starboard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vesselcontroller.ControlResponse Starboard(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Starboard, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> StarboardAsync(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StarboardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> StarboardAsync(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Starboard, null, options, request);
      }
      public virtual global::Vesselcontroller.ControlResponse Idle(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Idle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vesselcontroller.ControlResponse Idle(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Idle, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> IdleAsync(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IdleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> IdleAsync(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Idle, null, options, request);
      }
      public virtual global::Vesselcontroller.ControlResponse RotateClockwise(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RotateClockwise(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vesselcontroller.ControlResponse RotateClockwise(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RotateClockwise, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> RotateClockwiseAsync(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RotateClockwiseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> RotateClockwiseAsync(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RotateClockwise, null, options, request);
      }
      public virtual global::Vesselcontroller.ControlResponse RotateCounterClockwise(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RotateCounterClockwise(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vesselcontroller.ControlResponse RotateCounterClockwise(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RotateCounterClockwise, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> RotateCounterClockwiseAsync(global::Vesselcontroller.ControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RotateCounterClockwiseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vesselcontroller.ControlResponse> RotateCounterClockwiseAsync(global::Vesselcontroller.ControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RotateCounterClockwise, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VesselControllerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VesselControllerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VesselControllerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Forward, serviceImpl.Forward)
          .AddMethod(__Method_Backward, serviceImpl.Backward)
          .AddMethod(__Method_Portside, serviceImpl.Portside)
          .AddMethod(__Method_Starboard, serviceImpl.Starboard)
          .AddMethod(__Method_Idle, serviceImpl.Idle)
          .AddMethod(__Method_RotateClockwise, serviceImpl.RotateClockwise)
          .AddMethod(__Method_RotateCounterClockwise, serviceImpl.RotateCounterClockwise).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VesselControllerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Forward, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(serviceImpl.Forward));
      serviceBinder.AddMethod(__Method_Backward, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(serviceImpl.Backward));
      serviceBinder.AddMethod(__Method_Portside, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(serviceImpl.Portside));
      serviceBinder.AddMethod(__Method_Starboard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(serviceImpl.Starboard));
      serviceBinder.AddMethod(__Method_Idle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(serviceImpl.Idle));
      serviceBinder.AddMethod(__Method_RotateClockwise, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(serviceImpl.RotateClockwise));
      serviceBinder.AddMethod(__Method_RotateCounterClockwise, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vesselcontroller.ControlRequest, global::Vesselcontroller.ControlResponse>(serviceImpl.RotateCounterClockwise));
    }

  }
}
#endregion
