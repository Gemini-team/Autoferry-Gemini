# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from vehiclecontroller import vehiclecontroller_pb2 as vehiclecontroller_dot_vehiclecontroller__pb2


class VehicleControllerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.DriveForward = channel.unary_unary(
        '/vehiclecontroller.VehicleController/DriveForward',
        request_serializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveRequest.SerializeToString,
        response_deserializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveResponse.FromString,
        )
    self.DriveBackward = channel.unary_unary(
        '/vehiclecontroller.VehicleController/DriveBackward',
        request_serializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveRequest.SerializeToString,
        response_deserializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveResponse.FromString,
        )
    self.Steer = channel.unary_unary(
        '/vehiclecontroller.VehicleController/Steer',
        request_serializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveRequest.SerializeToString,
        response_deserializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveResponse.FromString,
        )
    self.Idle = channel.unary_unary(
        '/vehiclecontroller.VehicleController/Idle',
        request_serializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveRequest.SerializeToString,
        response_deserializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveResponse.FromString,
        )
    self.Brake = channel.unary_unary(
        '/vehiclecontroller.VehicleController/Brake',
        request_serializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveRequest.SerializeToString,
        response_deserializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveResponse.FromString,
        )


class VehicleControllerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def DriveForward(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DriveBackward(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Steer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Idle(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Brake(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VehicleControllerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'DriveForward': grpc.unary_unary_rpc_method_handler(
          servicer.DriveForward,
          request_deserializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveRequest.FromString,
          response_serializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveResponse.SerializeToString,
      ),
      'DriveBackward': grpc.unary_unary_rpc_method_handler(
          servicer.DriveBackward,
          request_deserializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveRequest.FromString,
          response_serializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveResponse.SerializeToString,
      ),
      'Steer': grpc.unary_unary_rpc_method_handler(
          servicer.Steer,
          request_deserializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveRequest.FromString,
          response_serializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveResponse.SerializeToString,
      ),
      'Idle': grpc.unary_unary_rpc_method_handler(
          servicer.Idle,
          request_deserializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveRequest.FromString,
          response_serializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveResponse.SerializeToString,
      ),
      'Brake': grpc.unary_unary_rpc_method_handler(
          servicer.Brake,
          request_deserializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveRequest.FromString,
          response_serializer=vehiclecontroller_dot_vehiclecontroller__pb2.DriveResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'vehiclecontroller.VehicleController', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
